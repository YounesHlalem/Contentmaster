// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace WebService.Migrations
{
    [DbContext(typeof(E4ProgressContext))]
    [Migration("20201203152405_added-officeAps")]
    partial class addedofficeAps
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("DAL.Model.ContentElementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tbl_content_element_type");
                });

            modelBuilder.Entity("DAL.Model.ContentElementTypeTranslation", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ContentElementTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("VARCHAR(40)");

                    b.HasKey("LanguageId", "ContentElementTypeId")
                        .HasName("PrimaryKey_ContentElementTypeTranslation");

                    b.HasIndex("ContentElementTypeId");

                    b.ToTable("tbl_content_element_type_translation");
                });

            modelBuilder.Entity("DAL.Model.ContentTheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(40)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tbl_content_theme");
                });

            modelBuilder.Entity("DAL.Model.ContentThemeTranslation", b =>
                {
                    b.Property<int>("ContentThemeId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("VARCHAR(40)");

                    b.HasKey("ContentThemeId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("tbl_content_theme_translation");
                });

            modelBuilder.Entity("DAL.Model.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATE");

                    b.Property<string>("Icon")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("InstructionsLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("OfficeApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Replicationkey")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.Property<int>("UserinterfaceLanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InstructionsLanguageId");

                    b.HasIndex("OfficeApplicationId");

                    b.HasIndex("Replicationkey")
                        .IsUnique();

                    b.HasIndex("UserinterfaceLanguageId");

                    b.ToTable("tbl_course");
                });

            modelBuilder.Entity("DAL.Model.CourseModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Sortorder")
                        .HasColumnType("INT(11)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasIndex("Sortorder")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("tbl_course_module");
                });

            modelBuilder.Entity("DAL.Model.CourseModuleTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseModuleId")
                        .HasColumnType("int");

                    b.Property<int>("Sortorder")
                        .HasColumnType("INT(11)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("CourseModuleId")
                        .IsUnique();

                    b.HasIndex("Sortorder")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("tbl_course_module_topic");
                });

            modelBuilder.Entity("DAL.Model.CourseModuleTopicElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContentElementId")
                        .HasColumnType("INT(11)");

                    b.Property<int>("ContentElementTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CourseModuleTopicId")
                        .HasColumnType("int");

                    b.Property<int>("DifficultyLevelId")
                        .HasColumnType("int");

                    b.Property<int>("Sortorder")
                        .HasColumnType("INT(11)");

                    b.HasKey("Id");

                    b.HasIndex("ContentElementId")
                        .IsUnique();

                    b.HasIndex("ContentElementTypeId")
                        .IsUnique();

                    b.HasIndex("CourseModuleTopicId")
                        .IsUnique();

                    b.HasIndex("DifficultyLevelId");

                    b.ToTable("tbl_course_module_topic_element");
                });

            modelBuilder.Entity("DAL.Model.DidacticalModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tbl_didactical_model");
                });

            modelBuilder.Entity("DAL.Model.DidacticalModelLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DidacticalModelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INT(10)");

                    b.HasKey("Id");

                    b.HasIndex("DidacticalModelId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SortOrder")
                        .IsUnique();

                    b.ToTable("tbl_didactical_model_level");
                });

            modelBuilder.Entity("DAL.Model.DidacticalModelLevelTranslation", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("DidacticalModelLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Translation")
                        .HasColumnType("VARCHAR(30)");

                    b.HasKey("LanguageId", "DidacticalModelLevelId");

                    b.HasIndex("DidacticalModelLevelId");

                    b.ToTable("tbl_didactical_model_level_translation");
                });

            modelBuilder.Entity("DAL.Model.DidacticalModelTranslation", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("DidacticalModelId")
                        .HasColumnType("int");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("CHAR(30)");

                    b.HasKey("LanguageId", "DidacticalModelId");

                    b.HasIndex("DidacticalModelId");

                    b.ToTable("tbl_didactical_model_translation");
                });

            modelBuilder.Entity("DAL.Model.DifficultyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)");

                    b.Property<int>("Number")
                        .HasColumnType("INT(11)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tbl_difficulty_level");
                });

            modelBuilder.Entity("DAL.Model.DifficultyLevelTranslation", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("DifficultyLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.HasKey("LanguageId", "DifficultyLevelId");

                    b.HasIndex("DifficultyLevelId");

                    b.ToTable("tbl_difficulty_level_translation");
                });

            modelBuilder.Entity("DAL.Model.Exercisefile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("ContainsCurrency")
                        .HasColumnType("BIT");

                    b.Property<ulong>("ContainsDate")
                        .HasColumnType("BIT");

                    b.Property<ulong>("ContainsGeographical")
                        .HasColumnType("BIT");

                    b.Property<ulong>("ContainsNamesToTranslate")
                        .HasColumnType("BIT");

                    b.Property<ulong>("ContainsTime")
                        .HasColumnType("BIT");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("Filename")
                        .IsUnique();

                    b.ToTable("tbl_exercisefile");
                });

            modelBuilder.Entity("DAL.Model.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("VARCHAR(3)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("NativeName")
                        .IsUnique();

                    b.ToTable("tbl_language");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "NL",
                            IsDeleted = false,
                            NativeName = "Nederlands"
                        },
                        new
                        {
                            Id = 2,
                            Code = "EN",
                            IsDeleted = false,
                            NativeName = "English"
                        });
                });

            modelBuilder.Entity("DAL.Model.LanguageTranslation", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("TranslationLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)");

                    b.HasKey("LanguageId", "TranslationLanguageId");

                    b.HasIndex("TranslationLanguageId");

                    b.ToTable("tbl_language_translation");
                });

            modelBuilder.Entity("DAL.Model.OfficeApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tbl_office_application");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Word"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Excel"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Powerpoint"
                        });
                });

            modelBuilder.Entity("DAL.Model.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("InstructionsLanguageId")
                        .HasColumnType("int");

                    b.Property<ulong>("IsMasterQuestion")
                        .HasColumnType("BIT");

                    b.Property<int>("MasterQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("OfficeApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionFormulationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Questiontext")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Replicationkey")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int>("UserinterfaceLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("INT(11)");

                    b.HasKey("Id");

                    b.HasIndex("InstructionsLanguageId");

                    b.HasIndex("MasterQuestionId");

                    b.HasIndex("OfficeApplicationId");

                    b.HasIndex("QuestionFormulationTypeId");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("Replicationkey")
                        .IsUnique();

                    b.HasIndex("UserinterfaceLanguageId");

                    b.ToTable("tbl_question");
                });

            modelBuilder.Entity("DAL.Model.QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Questionid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Questionid");

                    b.ToTable("tbl_question_answer");
                });

            modelBuilder.Entity("DAL.Model.QuestionContentTheme", b =>
                {
                    b.Property<int>("ContentThemeId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("ContentThemeId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("tbl_question_content_theme");
                });

            modelBuilder.Entity("DAL.Model.QuestionExercisefile", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("ExercisefileId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId", "ExercisefileId");

                    b.HasIndex("ExercisefileId");

                    b.ToTable("tbl_question_exercisefile");
                });

            modelBuilder.Entity("DAL.Model.QuestionFormulationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(20)");

                    b.HasKey("Id");

                    b.ToTable("tbl_question_formulation_type");
                });

            modelBuilder.Entity("DAL.Model.QuestionFormulationTypeTranslation", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionFormulationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.HasKey("LanguageId", "QuestionFormulationTypeId");

                    b.HasIndex("QuestionFormulationTypeId");

                    b.ToTable("tbl_question_formulation_type_translation");
                });

            modelBuilder.Entity("DAL.Model.QuestionLearninggoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DidacticalModelLevelId")
                        .HasColumnType("int");

                    b.Property<ulong>("IsMeasurable")
                        .HasColumnType("BIT(1)");

                    b.Property<string>("Learninggoal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INT(11)");

                    b.HasKey("Id");

                    b.HasIndex("DidacticalModelLevelId");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.HasIndex("SortOrder")
                        .IsUnique();

                    b.ToTable("tbl_question_learninggoal");
                });

            modelBuilder.Entity("DAL.Model.QuestionPreKnowledgeSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INT(11)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.HasIndex("SortOrder")
                        .IsUnique();

                    b.ToTable("tbl_question_pre_knowledge_skill");
                });

            modelBuilder.Entity("DAL.Model.QuestionsHistory", b =>
                {
                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("CHAR(1)");

                    b.Property<int>("ActionDoneByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ActionTimestamp")
                        .HasColumnType("DATETIME");

                    b.Property<int>("InstructionsLanguageId")
                        .HasColumnType("INT(11)");

                    b.Property<ulong>("IsMasterQuestion")
                        .HasColumnType("BIT");

                    b.Property<int>("MasterQuestionId")
                        .HasColumnType("INT(11)");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("OfficeApplicationId")
                        .HasColumnType("INT(11)");

                    b.Property<int>("QuestionFormulationTypeId")
                        .HasColumnType("INT(11)");

                    b.Property<string>("QuestionReplicationkey")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("INT(11)");

                    b.Property<string>("Questiontext")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserinterfaceLanguageId")
                        .HasColumnType("INT(11)");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("INT(11)");

                    b.Property<string>("title")
                        .HasColumnType("VARCHAR(100)");

                    b.HasIndex("ActionDoneByUserId");

                    b.ToTable("tbl_questions_history");
                });

            modelBuilder.Entity("DAL.Model.Questiontype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(40)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tbl_questiontype");
                });

            modelBuilder.Entity("DAL.Model.QuestiontypeTranslation", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("QuestiontypeId")
                        .HasColumnType("int");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("VARCHAR(40)");

                    b.HasKey("LanguageId", "QuestiontypeId");

                    b.HasIndex("QuestiontypeId");

                    b.ToTable("tbl_questiontype_translation");
                });

            modelBuilder.Entity("DAL.Model.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("DefaultMinimumScore")
                        .HasColumnType("decimal(12,7)")
                        .HasColumnName("default_minimum_score");

                    b.Property<TimeSpan>("DefaultTimeLimit")
                        .HasColumnType("time")
                        .HasColumnName("default_time_limit");

                    b.Property<string>("IdentificationCode")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Identification_code");

                    b.Property<int>("InstructionsLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Intro")
                        .HasColumnType("text");

                    b.Property<int>("OfficeApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Replicationkey")
                        .IsRequired()
                        .HasColumnType("VARchar(36)");

                    b.Property<string>("ShortIntro")
                        .HasColumnType("text")
                        .HasColumnName("short_intro");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserinterfaceLanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdentificationCode")
                        .IsUnique();

                    b.HasIndex("InstructionsLanguageId");

                    b.HasIndex("OfficeApplicationId")
                        .IsUnique();

                    b.HasIndex("Replicationkey")
                        .IsUnique();

                    b.HasIndex("UserinterfaceLanguageId");

                    b.ToTable("tbl_quiz");
                });

            modelBuilder.Entity("DAL.Model.QuizQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("Sortorder")
                        .HasColumnType("INT(11)");

                    b.HasKey("QuestionId", "QuizId");

                    b.HasIndex("QuizId")
                        .IsUnique();

                    b.HasIndex("Sortorder")
                        .IsUnique();

                    b.ToTable("tbl_quiz_question");
                });

            modelBuilder.Entity("DAL.Model.QuizQuestionAnswer", b =>
                {
                    b.Property<int>("QuestionAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<decimal>("Fraction")
                        .HasColumnType("DECIMAL(12,7)");

                    b.Property<int>("QuestionId1")
                        .HasColumnType("int");

                    b.HasKey("QuestionAnswerId", "QuestionId", "QuizId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionId1");

                    b.HasIndex("QuizId");

                    b.ToTable("tbl_quiz_question_answer");
                });

            modelBuilder.Entity("DAL.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tbl_role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "User",
                            IsDeleted = false,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Administrator",
                            IsDeleted = false,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("DAL.Model.RoleTranslation", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)");

                    b.HasKey("LanguageId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("tbl_role_translation");
                });

            modelBuilder.Entity("DAL.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Firstname")
                        .HasColumnType("VARCHAR(70)");

                    b.Property<string>("Lastname")
                        .HasColumnType("VARCHAR(70)");

                    b.Property<string>("Password")
                        .HasColumnType("VARCHAR(60)");

                    b.Property<int>("PreferredLanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PreferredLanguageId");

                    b.ToTable("tbl_user");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@local.host",
                            Firstname = "Admin",
                            Lastname = "Admin",
                            Password = "$2a$11$DM380SovMqqQpFqCGTPL3uAL64fG7.MRSlzb/gLrRSvJOmwhQw/Ze",
                            PreferredLanguageId = 1
                        });
                });

            modelBuilder.Entity("DAL.Model.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_user_role");
                });

            modelBuilder.Entity("DAL.Model.ContentElementTypeTranslation", b =>
                {
                    b.HasOne("DAL.Model.ContentElementType", "ContentElementType")
                        .WithMany()
                        .HasForeignKey("ContentElementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentElementType");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DAL.Model.ContentThemeTranslation", b =>
                {
                    b.HasOne("DAL.Model.ContentTheme", "ContentTheme")
                        .WithMany()
                        .HasForeignKey("ContentThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentTheme");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DAL.Model.Course", b =>
                {
                    b.HasOne("DAL.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.Language", "InstructionsLanguage")
                        .WithMany()
                        .HasForeignKey("InstructionsLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.OfficeApplication", "OfficeApplication")
                        .WithMany()
                        .HasForeignKey("OfficeApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.Language", "UserinterfaceLanguage")
                        .WithMany()
                        .HasForeignKey("UserinterfaceLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstructionsLanguage");

                    b.Navigation("OfficeApplication");

                    b.Navigation("User");

                    b.Navigation("UserinterfaceLanguage");
                });

            modelBuilder.Entity("DAL.Model.CourseModule", b =>
                {
                    b.HasOne("DAL.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("DAL.Model.CourseModuleTopic", b =>
                {
                    b.HasOne("DAL.Model.CourseModule", "CourseModule")
                        .WithMany()
                        .HasForeignKey("CourseModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseModule");
                });

            modelBuilder.Entity("DAL.Model.CourseModuleTopicElement", b =>
                {
                    b.HasOne("DAL.Model.ContentElementType", "ContentElementType")
                        .WithMany()
                        .HasForeignKey("ContentElementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.CourseModuleTopic", "CourseModuleTopic")
                        .WithMany()
                        .HasForeignKey("CourseModuleTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.DifficultyLevel", "DifficultyLevel")
                        .WithMany()
                        .HasForeignKey("DifficultyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentElementType");

                    b.Navigation("CourseModuleTopic");

                    b.Navigation("DifficultyLevel");
                });

            modelBuilder.Entity("DAL.Model.DidacticalModelLevel", b =>
                {
                    b.HasOne("DAL.Model.DidacticalModel", "DidacticalModel")
                        .WithMany()
                        .HasForeignKey("DidacticalModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DidacticalModel");
                });

            modelBuilder.Entity("DAL.Model.DidacticalModelLevelTranslation", b =>
                {
                    b.HasOne("DAL.Model.DidacticalModel", "DidacticalModelLevel")
                        .WithMany()
                        .HasForeignKey("DidacticalModelLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DidacticalModelLevel");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DAL.Model.DidacticalModelTranslation", b =>
                {
                    b.HasOne("DAL.Model.DidacticalModel", "DidacticalModel")
                        .WithMany()
                        .HasForeignKey("DidacticalModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DidacticalModel");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DAL.Model.DifficultyLevelTranslation", b =>
                {
                    b.HasOne("DAL.Model.DifficultyLevel", "DifficultyLevel")
                        .WithMany()
                        .HasForeignKey("DifficultyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DifficultyLevel");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DAL.Model.LanguageTranslation", b =>
                {
                    b.HasOne("DAL.Model.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.Language", "TranslationLanguage")
                        .WithMany()
                        .HasForeignKey("TranslationLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("TranslationLanguage");
                });

            modelBuilder.Entity("DAL.Model.Question", b =>
                {
                    b.HasOne("DAL.Model.Language", "InstructionsLanguage")
                        .WithMany()
                        .HasForeignKey("InstructionsLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.Question", "MasterQuestion")
                        .WithMany()
                        .HasForeignKey("MasterQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.OfficeApplication", "OfficeApplication")
                        .WithMany()
                        .HasForeignKey("OfficeApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.QuestionFormulationType", "QuestionFormulationType")
                        .WithMany()
                        .HasForeignKey("QuestionFormulationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.Questiontype", "Questiontype")
                        .WithMany()
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.Language", "UserinterfaceLanguage")
                        .WithMany()
                        .HasForeignKey("UserinterfaceLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstructionsLanguage");

                    b.Navigation("MasterQuestion");

                    b.Navigation("OfficeApplication");

                    b.Navigation("QuestionFormulationType");

                    b.Navigation("Questiontype");

                    b.Navigation("UserinterfaceLanguage");
                });

            modelBuilder.Entity("DAL.Model.QuestionAnswer", b =>
                {
                    b.HasOne("DAL.Model.Question", "Question")
                        .WithMany()
                        .HasForeignKey("Questionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DAL.Model.QuestionContentTheme", b =>
                {
                    b.HasOne("DAL.Model.ContentTheme", "ContentTheme")
                        .WithMany()
                        .HasForeignKey("ContentThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentTheme");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DAL.Model.QuestionExercisefile", b =>
                {
                    b.HasOne("DAL.Model.Exercisefile", "Exercisefile")
                        .WithMany()
                        .HasForeignKey("ExercisefileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercisefile");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DAL.Model.QuestionFormulationTypeTranslation", b =>
                {
                    b.HasOne("DAL.Model.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.QuestionFormulationType", "QuestionFormulationType")
                        .WithMany()
                        .HasForeignKey("QuestionFormulationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("QuestionFormulationType");
                });

            modelBuilder.Entity("DAL.Model.QuestionLearninggoal", b =>
                {
                    b.HasOne("DAL.Model.DidacticalModelLevel", "DidacticalModelLevel")
                        .WithMany()
                        .HasForeignKey("DidacticalModelLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DidacticalModelLevel");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DAL.Model.QuestionPreKnowledgeSkill", b =>
                {
                    b.HasOne("DAL.Model.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DAL.Model.QuestionsHistory", b =>
                {
                    b.HasOne("DAL.Model.User", "ActionDoneByUser")
                        .WithMany()
                        .HasForeignKey("ActionDoneByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionDoneByUser");
                });

            modelBuilder.Entity("DAL.Model.QuestiontypeTranslation", b =>
                {
                    b.HasOne("DAL.Model.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.Questiontype", "Questiontype")
                        .WithMany()
                        .HasForeignKey("QuestiontypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Questiontype");
                });

            modelBuilder.Entity("DAL.Model.Quiz", b =>
                {
                    b.HasOne("DAL.Model.Language", "InstructionsLanguage")
                        .WithMany()
                        .HasForeignKey("InstructionsLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.OfficeApplication", "OfficeApplications")
                        .WithMany()
                        .HasForeignKey("OfficeApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.Language", "UserinterfaceLanguage")
                        .WithMany()
                        .HasForeignKey("UserinterfaceLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstructionsLanguage");

                    b.Navigation("OfficeApplications");

                    b.Navigation("UserinterfaceLanguage");
                });

            modelBuilder.Entity("DAL.Model.QuizQuestion", b =>
                {
                    b.HasOne("DAL.Model.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("DAL.Model.QuizQuestionAnswer", b =>
                {
                    b.HasOne("DAL.Model.QuestionAnswer", "QuestionAnswer")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("QuestionAnswer");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("DAL.Model.RoleTranslation", b =>
                {
                    b.HasOne("DAL.Model.Language", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Languages");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DAL.Model.User", b =>
                {
                    b.HasOne("DAL.Model.Language", "PreferredLanguage")
                        .WithMany()
                        .HasForeignKey("PreferredLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreferredLanguage");
                });

            modelBuilder.Entity("DAL.Model.UserRole", b =>
                {
                    b.HasOne("DAL.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
